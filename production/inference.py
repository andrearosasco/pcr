#!/usr/bin/env python3
# Template auto-generated by polygraphy [v0.35.1] on 02/16/22 at 09:27:13
# Generation Command: \Users\arosasco\.conda\envs\pcr_aux\Scripts\polygraphy run pcr.onnx --trt --onnxrt --trt-outputs mark all --onnx-outputs mark all --fail-fast --gen-script -
# This script compares C:\Users\arosasco\PycharmProjects\pcr\pcr.onnx between TensorRT and ONNX Runtime.

from polygraphy.logger import G_LOGGER

from polygraphy import constants
from polygraphy.backend.onnx import BytesFromOnnx, ModifyOutputs as ModifyOnnxOutputs, OnnxFromPath
from polygraphy.backend.onnxrt import OnnxrtRunner, SessionFromOnnx
from polygraphy.backend.trt import EngineFromNetwork, ModifyNetworkOutputs, NetworkFromOnnxPath, TrtRunner
from polygraphy.comparator import Comparator, CompareFunc
import sys

# Loaders
parse_network_from_onnx = NetworkFromOnnxPath('C:\\Users\\arosasco\\PycharmProjects\\pcr\\pcr.onnx')
modify_network = ModifyNetworkOutputs(parse_network_from_onnx, outputs=constants.MARK_ALL)
build_engine = EngineFromNetwork(modify_network)
load_onnx = OnnxFromPath('C:\\Users\\arosasco\\PycharmProjects\\pcr\\pcr.onnx')
modify_outputs = ModifyOnnxOutputs(load_onnx, outputs=constants.MARK_ALL)
serialize_onnx = BytesFromOnnx(modify_outputs)
build_onnxrt_session = SessionFromOnnx(serialize_onnx)

# Runners
runners = [
    TrtRunner(build_engine),
    OnnxrtRunner(build_onnxrt_session),
]

# Runner Execution
results = Comparator.run(runners)

success = True
# Accuracy Comparison
compare_func = CompareFunc.simple(fail_fast=True)
success &= bool(Comparator.compare_accuracy(results, compare_func=compare_func, fail_fast=True))

# Report Results
cmd_run = ' '.join(sys.argv)
if not success:
    G_LOGGER.critical("FAILED | Command: {}".format(cmd_run))
G_LOGGER.finish("PASSED | Command: {}".format(cmd_run))